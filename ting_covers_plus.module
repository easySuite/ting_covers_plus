<?php

/**
 * @file ting_covers_plus.module
 *
 * Provides:
 * - plugins for retrieving covers for Ting objects and collections from additional cover providers
 * - extra default covers and interface for administering them
 */

/**
 * Implements hook_menu().
 */
function ting_covers_plus_menu() {
  $items = array();

  $items['ting/coversplus'] = array(
    'title' => 'Retreives cover for Ting objects',
    'page callback' => 'ting_covers_plus_objects',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'ting_covers_plus.pages.inc',
  );

  /*
  $items['admin/config/ting/covers/defaults'] = array(
    'title' => 'Default covers',
    'description' => 'Configure settings for default covers.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ting_covers_plus_admin_default_covers_form'),
    'access arguments' => array('administer site configuration'),
    'file' => 'ting_covers_plus.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );
  */

  return $items;
}

/**
 * Implements hook_preprocess_ting_object_cover().
 */
function ting_covers_plus_preprocess_ting_object_cover(&$variables) {
  $object = $variables['object'] = $variables['elements']['#object'];
  $ac_source = !empty($object->reply->record['ac:source'][''][0]) ? $object->reply->record['ac:source'][''][0] : FALSE; //array_shift($object->reply->record['ac:source']);
  $dc_type = !empty($object->reply->record['dc:type']['dkdcplus:BibDK-Type'][0]) ? $object->reply->record['dc:type']['dkdcplus:BibDK-Type'][0] : (!empty($object->reply->record['dc:type'][''][0]) ? $object->reply->record['dc:type'][''][0] : FALSE);

  // Set extra values required by the template.
  $variables['classes'][] = 'ting-cover-mtype-' . drupal_clean_css_identifier($dc_type);
  $variables['classes'][] = 'ting-cover-source-' . drupal_clean_css_identifier($ac_source);
}

/**
 * Implements hook_field_formatter_info().
 */
function ting_covers_plus_field_formatter_info() {
  return array(
    'ting_cover_default' => array(
      'label' => t('Default'),
      'field types' => array('ting_cover'),
      'settings' => array(
        'image_style' => 'medium',
      ),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function ting_covers_plus_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  foreach ($items as $delta => $item) {
    $element[$delta] = array(
      '#theme' => 'ting_object_cover',
      '#object' => $entity,
      '#image_style' => $display['settings']['image_style'],
      '#attached' => array(
        'js' => array(drupal_get_path('module', 'ting_covers_plus') . '/js/ting-covers-plus.js'),
      ),
    );
  }

  return $element;
}


/**
 * Function to call all extra covers sources that have been defined.
 *
 * The array $missing_images_local_ids is modified to include
 * additional image URLs to external sources.
 *
 * @param array $missing_images_local_ids (by reference)
 * @param array $covers (by reference)
 * @param array $image_styles;
 */
function ting_covers_plus_get_image_urls(&$missing_images_local_ids, &$covers, $image_styles) {
  $sources = module_invoke_all('ting_covers_plus_sources');

  // Calls to external image sources for specific sources
  foreach ($missing_images_local_ids as $local_id_key => $local_id) {

    // Danske Billeder source
    if ($local_id->sourceName == 'Danske-Billeder') {
      $covers[] = array(
        'local_id' => $local_id->localIdentifier,
        'image_style' => $image_styles[$local_id->localIdentifier],
        'url' => ting_covers_plus_cover_url_dkbilleder($local_id),
      );

      // Remove from missing images array so ADDI service won't call it later
      unset($missing_images_local_ids[$local_id_key]);
    }

    // Historisk Atlas source
    if ($local_id->sourceName == 'Historisk-Atlas') {
      $covers[] = array(
        'local_id' => $local_id->localIdentifier,
        'image_style' => $image_styles[$local_id->localIdentifier],
        'url' => ting_covers_plus_cover_url_histatlas($local_id),
      );

      // Remove from missing images array so ADDI service won't call it later
      unset($missing_images_local_ids[$local_id_key]);
    }

    // DLB Vejle sources
    if ($local_id->sourceName == '630-01') {
      $covers[] = array(
        'local_id' => $local_id->localIdentifier,
        'image_style' => $image_styles[$local_id->localIdentifier],
        'url' => ting_covers_plus_cover_url_dlb_vejle($local_id),
      );

      // Remove from missing images array so ADDI service won't call it later
      unset($missing_images_local_ids[$local_id_key]);
    }
  }

  // Reset array index before traversing it again
  reset($missing_images_local_ids);
}


/**
 * Declares information about extra cover sources for ting objects and collections.
 *
 * Any module can declare additional cover providers by implementing this hook.
 *
 * @return
 * An associative array of cover source information. The keys of the array
 * are the names of the action functions, and each corresponding value
 * is an associative array with the following key-value pairs:
 * - 'type': The type of object this action acts upon. Core actions have types
 * 'node', 'user', 'comment', and 'system'.
 * - 'label': The human-readable name of the action, which should be passed
 * through the t() function for translation.
 */
function hook_ting_covers_plus_sources() {
  return array(
    'histatlas' => array(
      'sourcelabel' => 'Historisk-Atlas',
      'function' => 'ting_covers_plus_cover_url_histatlas',
    ),
    'dkbilleder' => array(
      'sourcelabel' => 'Danske-Billeder',
      'function' => 'ting_covers_plus_cover_url_dkbilleder',
    ),
    'dlb_vejle' => array(
      'sourcelabel' => 'Vejle-Stadsarkiv',
      'function' => 'ting_covers_plus_cover_url_dlb_vejle',
    ),
  );
}

/**
 * Function to get cover URL from provider Historisk Atlas
 *
 * @param object $local_id: is a 2-part identifier containing $local_id->libraryCode and $local_id->localIdentifier
 * @return string: url to image from Historisk Atlas
 */
function ting_covers_plus_cover_url_histatlas($local_id) {
  // Call the well with agency (ex. 763000) and the 2-part identifier (owner_id:local_id, eks. 150043:3802)
  require_once drupal_get_path('module', 'ting') . '/ting.client.inc';

  $request = ting_get_request_factory()->getObjectRequest();

  if ($agency = variable_get('ting_agency', FALSE)) {
    $request->setAgency($agency);
  }

  $profile = variable_get('ting_search_profile', '');
  if (!empty($profile) && method_exists($request, 'setProfile')) {
    $request->setProfile($profile);
  }

  // The identifier is libraryCode (aka owner_id) + local ID
  $request->setObjectId($local_id->libraryCode . ':' . $local_id->localIdentifier);
  $request->setFormat('opensearchobject');
  $request->setObjectFormat('opensearchobject');
  $request->setAllRelations('true');
  $request->setRelationData('full');
  // Set to PHP output instead of JSON to retrieve the relations - in JSON they are not present
  $request->setOutputType('php');

  $histatlas_result = ting_get_client()->execute($request);

  // Get URL to image from Historisk Atlas
  $histatlas_url = unserialize($histatlas_result)->searchResponse->_value->result->_value->searchResult[0]->_value->collection->_value->object[0]->_value->relations->_value->relation[1]->_value->relationObject->_value->object->_value->object->_value->image->_value;

  if (!empty($histatlas_url)) {
    $histatlas_url = $histatlas_url . '?width=200';
  }
  else {
    //TODO: get default from settings instead
    $histatlas_url = $GLOBALS['base_url'] . '/sites/default/files/ting_covers_defaults/histatlas.jpg';
  }

  // TODO: Try to download the image locally.

  return $histatlas_url;
}


/**
 * Function to get cover URL from provider Danske Billeder
 *
 * @param object $local_id: is a 2-part identifier containing $local_id->libraryCode and $local_id->localIdentifier
 * @return string: url to image from Danske Billeder
 */
function ting_covers_plus_cover_url_dkbilleder($local_id) {
  // Call the well with agency (ex. 763000) and the 2-part identifier (owner_id:local_id, eks. 150043:3802)
  require_once drupal_get_path('module', 'ting') . '/ting.client.inc';

  $request = ting_get_request_factory()->getObjectRequest();

  if ($agency = variable_get('ting_agency', FALSE)) {
    $request->setAgency($agency);
  }

  $profile = variable_get('ting_search_profile', '');
  if (!empty($profile) && method_exists($request, 'setProfile')) {
    $request->setProfile($profile);
  }

  // The identifier is libraryCode (aka owner_id) + local ID
  $request->setObjectId($local_id->libraryCode . ':' . $local_id->localIdentifier);
  $request->setFormat('opensearchobject');
  $request->setObjectFormat('opensearchobject');
  $request->setAllRelations('true');
  $request->setRelationData('full');
  // Set to PHP output instead of JSON to retrieve the relations - in JSON they are not present
  $request->setOutputType('php');

  $dkbilleder_result = ting_get_client()->execute($request);

  // Get URL to image from Danske Billeder
  $dkbilleder_url = unserialize($dkbilleder_result)->searchResponse->_value->result->_value->searchResult[0]->_value->collection->_value->object[0]->_value->relations->_value->relation[1]->_value->relationObject->_value->object->_value->object->_value->image->_value;

  if (!empty($dkbilleder_url)) {
    $dkbilleder_url = $dkbilleder_url;
  }
  else {
    //TODO: get default from settings instead
    $dkbilleder_url = $GLOBALS['base_url'] . '/sites/default/files/ting_covers_defaults/dkbilleder.jpg';
  }

  // TODO: Try to download the image locally.

  return $dkbilleder_url;
}


/**
 * Function to get cover URL from provider DLB Vejle (Dansk Lokalbibliografi Vejle)
 *
 * @param object $local_id: is a 2-part identifier containing $local_id->libraryCode and $local_id->localIdentifier
 * @return string: url to image from DLB Vejle
 */
function ting_covers_plus_cover_url_dlb_vejle($local_id) {
  /*
  // Call the well with agency (ex. 763000) and the 2-part identifier (owner_id:local_id, eks. 150043:3802)
  require_once drupal_get_path('module', 'ting') . '/ting.client.inc';

  $request = ting_get_request_factory()->getObjectRequest();

  if ($agency = variable_get('ting_agency', FALSE)) {
    $request->setAgency($agency);
  }

  $profile = variable_get('ting_search_profile', '');
  if (!empty($profile) && method_exists($request, 'setProfile')) {
    $request->setProfile($profile);
  }

  // The identifier is libraryCode (aka owner_id) + local ID
  $request->setObjectId($local_id->libraryCode . ':' . $local_id->localIdentifier);
  $request->setFormat('opensearchobject');
  $request->setObjectFormat('opensearchobject');
  $request->setAllRelations('true');
  $request->setRelationData('full');
  // Set to PHP output instead of JSON to retrieve the relations - in JSON they are not present
  $request->setOutputType('php');

  $dlb_vejle_result = ting_execute_cache($request);

  // Get URL to image from DLB Vejle
  $dlb_vejle_url = unserialize($dlb_vejle_result)->searchResponse->_value->result->_value->searchResult[0]->_value->collection->_value->object[0]->_value->relations->_value->relation[1]->_value->relationObject->_value->object->_value->object->_value->image->_value;
  */

  if (!empty($dlb_vejle_url)) {
    $dlb_vejle_url = $dlb_vejle_url;
  }
  else {
    //TODO: get default from settings instead
    $dlb_vejle_url = $GLOBALS['base_url'] . '/sites/default/files/ting_covers_defaults/dlb_vejle.png';
  }

  // TODO: Try to download the image locally.

  return $dlb_vejle_url;
}

